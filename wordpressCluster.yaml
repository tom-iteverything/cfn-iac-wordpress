AWSTemplateFormatVersion: "2010-09-09"

# Setting EC2 parameters
Parameters:
  VpcId:
    Description: "Select specific VPC ID you wish to deploy the EC2 instance to."
    Type: AWS::EC2::VPC::Id
  SourceCidr:
    Description: "Source Cidr range for Source access."
    Type: String
    Default: 72.94.166.0/24
  PublicSubnets:
    Description: "Defined subnet for RDS Cluster."
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Description: "Defined subnet for RDS Cluster."
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Provide the SSM Parameter path to a valid AMI ID
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Description: "Please select the Instance Type."
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
  AsgDesired:
    Type: Number
    Description: "Specify the number of instances to launch by default"
    MinValue: 1
    MaxValue: 10
    Default: 3
  AsgMin:
    Type: Number
    Description: "Specify the minimum number of instances to launch"
    MinValue: 1
    MaxValue: 10
    Default: 1
  AsgMax:
    Type: Number
    Description: "Specify the maximum number of instances to launch"
    MinValue: 1
    MaxValue: 10
    Default: 6

# Provisioning EC2 instances, IAM Roles & settings
Resources:
  # Create IAM Role
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Grant EC2 access from Systems Manager & CloudWatch."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"

  # Creating IAM Instance Profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamRole

  DBClusterParameterGroupName:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub "${AWS::StackName} DB Cluster ParameterGroup"
      Family: aurora-mysql5.7
      Parameters:
        character_set_database: utf32
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-wordpress"

  DBSubnetGroupName:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName} DB Subnet Group"
      SubnetIds: !Ref PrivateSubnets
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-wordpress"

  RDSClusterKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Key to encrpyt data stored on RDS Cluster"
      EnableKeyRotation: true
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM Policies
            Effect: "Allow"
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          - Sid: Enable RDS Access
            Effect: "Allow"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:ListGrants"
              - "kms:CreateGrant"
              - "kms:Describe*"
            Resource: "*"
            Principal:
              AWS: "*"
            Condition:
              StringEquals:
                kms:ViaService:
                  - !Sub "ec2.${AWS::Region}.${AWS::URLSuffix}"
                  - !Sub "rds.${AWS::Region}.${AWS::URLSuffix}"
                aws:SourceAccount: !Ref AWS::AccountId

  SecretsManagerKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "This key will encrypt data stored in Secrets Manager"
      EnableKeyRotation: true
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM Policies
            Effect: "Allow"
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          - Sid: Enable Secrets Manager
            Effect: "Allow"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Principal:
              AWS: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub "secretsmanager.${AWS::Region}.${AWS::URLSuffix}"
                kms:CallerAccount: !Ref AWS::AccountId

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: Wordpress RDS Instance Credentials
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 32 # Max password length 41 (for this setup)
        RequireEachIncludedType: true
        SecretStringTemplate: '{"username": "admin"}'
      KmsKeyId: !Ref SecretsManagerKmsKey

  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster

  # Creating RDS Cluster (Aurora)
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 30
      CopyTagsToSnapshot: true
      DatabaseName: wordpressDB
      DBClusterParameterGroupName: !Ref DBClusterParameterGroupName
      DBSubnetGroupName: !Ref DBSubnetGroupName
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: false # not currently supported by Aurora Serverless
      Engine: aurora-mysql
      EngineMode: serverless
      EngineVersion: 5.7.mysql_aurora.2.10.2
      MasterUsername: !Sub "{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}"
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref RdsSecurityGroup

  # Create EFS Security Group
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows inbound traffic on TCP:2049 (NFS) from our EC2 servers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants inbound NFS access from our wordpress servers
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Wordpress-EFS"

  # Create RDS Security Group
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This group will allow TCP:3306 inbound to our RDS Instances from the wordpress servers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants TCP:3306 inbound access to our RDS Instance
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      SecurityGroupEgress:
        - Description: Grants outbound to all
          IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Wordpress-RDS"

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "This group will allow HTTP access to the Elastic Load Balancer from ${SourceCidr}"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants inbound HTTP access from external sources
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SourceCidr
      SecurityGroupEgress:
        - Description: Grants outbound to all
          IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Wordpress-ELB"

  # Creating SecurityGroup for SSH
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceCidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      VpcId: !Ref VpcId

  # Launch Template in order to run bash code for Wordpress
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        MetadataOptions:
          HttpTokens: required
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum upgrade -y
            amazon-linux-extras install -y epel
            yum install -y amazon-efs-utils
            echo "${EfsFileSystem}:/ /var/www/html efs _netdev,tls,iam 0 0" >> /etc/fstab
            mount -a
            yum install -y httpd mysql jq
            amazon-linux-extras install -y php8.0
            amazon-linux-extras install -y httpd_modules
            yum clean metadata
            yum install -y php-gd.x86_64
            yum install -y php-mbstring.x86_64
            echo "Hello World from $(hostname -f)" > /var/www/html/index.html
            service httpd start
            chkconfig httpd on

  # Define/Create autoscaling group for EC2 instances (cluster)
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 180
      HealthCheckType: EC2 # ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      DesiredCapacity: !Ref AsgDesired
      MinSize: !Ref AsgMin
      MaxSize: !Ref AsgMax
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: !Ref PrivateSubnets
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-LinuxASG-Wordpress"
          PropagateAtLaunch: true

  # Define Autoscaling Policy for EC2 instances
  AutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80

  # Define ELB (ALB)
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Ref PublicSubnets

  # Define TargetGroup for ELB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true

  # Define ELB Listener
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Define EFS Policy
  EFSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref IamRole
      PolicyName: GrantEfsAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - elasticfilesystem:DescribeMountTargets
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientWrite
            Resource: !GetAtt EfsFileSystem.Arn

  # Define EFS
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      PerformanceMode: generalPurpose

  # EFS Mount (A)
  EfsMountPointA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups: [!Ref EfsSecurityGroup]
      SubnetId: !Select [0, !Ref PrivateSubnets]

  # EFS Mount (B)
  EfsMountPointB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups: [!Ref EfsSecurityGroup]
      SubnetId: !Select [1, !Ref PrivateSubnets]

  # EFS Mount (C)
  EfsMountPointC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups: [!Ref EfsSecurityGroup]
      SubnetId: !Select [2, !Ref PrivateSubnets]

# Cloudformation output code
Outputs:
  LinuxSiteUrl:
    Value: !Sub "http://${ElasticLoadBalancer.DNSName}/"
    Description: Public facing url of our sample website
