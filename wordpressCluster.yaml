AWSTemplateFormatVersion: "2010-09-09"

# Setting EC2 parameters
Parameters:
  VpcId:
    Description: "Select specific VPC ID you wish to deploy the EC2 instance to."
    Type: AWS::EC2::VPC::Id
  SourceCidr:
    Description: "Source Cidr range for Source access."
    Type: String
    Default: 72.94.166.0/24
  SubnetId:
    Description: "Defined subnet for EC2 instance."
    Type: AWS::EC2::Subnet::Id
  RDSSubnets:
    Description: "Defined subnet for RDS Cluster."
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Provide the SSM Parameter path to a valid AMI ID
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Description: "Please select the Instance Type."
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium

# Provisioning EC2 instances, IAM Roles & settings
Resources:
  # Create IAM Role
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Grant EC2 access from Systems Manager & CloudWatch."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"

  # Creating IAM Instance Profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamRole

  DBClusterParameterGroupName:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties: 
      Description: !Sub "${AWS::StackName} DB Cluster ParameterGroup"
      Family: aurora-mysql5.7
      Parameters: 
        character_set_database: utf32
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-wordpress'

  DBSubnetGroupName:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: !Sub "${AWS::StackName} DB Subnet Group"
      SubnetIds: !Ref RDSSubnets
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-wordpress'

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: Wordpress RDS Instance Credentials
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 64
        RequireEachIncludedType: true
        SecretStringTemplate: '{"username": "admin"}'
      # KmsKeyId: !Ref SecretsManagerKmsKey

  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster

  # Creating RDS Cluster (Aurora)
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 30
      CopyTagsToSnapshot: true
      DatabaseName: wordpressDB
      DBClusterParameterGroupName: !Ref DBClusterParameterGroupName
      DBSubnetGroupName: !Ref DBSubnetGroupName
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: false # not currently supported by Aurora Serverless
      Engine: aurora-mysql
      EngineMode: serverless
      EngineVersion: 5.7.mysql_aurora.2.10.2
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref RdsSecurityGroup

  # Create RDS Security Group
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This group will allow TCP:3306 inbound to our RDS Instances from the wordpress servers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants TCP:3306 inbound access to our RDS Instance
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      SecurityGroupEgress:
        - Description: Grants outbound to all
          IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Wordpress-RDS"

  # Building the EC2 selections
  MyEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetId

  # Creating SecurityGroup for SSH
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceCidr
      VpcId: !Ref VpcId
